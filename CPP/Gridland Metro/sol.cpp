// https://www.hackerrank.com/challenges/gridland-metro/problem

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'gridlandMetro' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER m
 *  3. INTEGER k
 *  4. 2D_INTEGER_ARRAY track
 */

int gridlandMetro(int n, int m, int k, vector<vector<int>> track) {
    vector<set<int>> t;
    for(int i=0; i<n; i++) t.push_back({});
    for(auto v: track){
        for(int i=v[1]; i<=v[2]; i++) t[v[0]-1].insert(i);
    }
    int ans=0;
    for(auto s: t){
        ans+=(m-s.size());
    }
    return ans;
}


int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int m = stoi(first_multiple_input[1]);

    int k = stoi(first_multiple_input[2]);

    vector<vector<int>> track(k);

    for (int i = 0; i < k; i++) {
        track[i].resize(3);

        string track_row_temp_temp;
        getline(cin, track_row_temp_temp);

        vector<string> track_row_temp = split(rtrim(track_row_temp_temp));

        for (int j = 0; j < 3; j++) {
            int track_row_item = stoi(track_row_temp[j]);

            track[i][j] = track_row_item;
        }
    }

    int result = gridlandMetro(n, m, k, track);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}


/*
694211784 32862407 183
202802155 24795969 28821560
242728372 1488688 23907641
133168371 1581394 30879246
291957577 32272856 32688518
529533643 7495396 13904809
569288644 8607031 23913123
462274745 19411990 20995333
253080127 31330445 32069693
160927339 19735352 25940885
354860072 23071023 30635558
310452359 72159 6754902
636189457 7067990 14053833
4154497 22067435 25323363
577211595 24742899 26078143
568483811 14619722 18320111
353501533 31685098 32052571
359633931 15916351 31483124
227308034 23350260 26785736
517137989 22113505 23028942
452827903 7268114 13241609
6309902 29651229 31951711
617608098 11379625 22367042
563107808 14313829 20615647
269764022 27069321 31168771
93557453 22190645 24042963
140431549 11261951 25827053
292406667 8339875 16897973
13284576 25229531 30573086
69400510 21302827 25368772
294068724 27660911 30397643
47815208 31292775 32772063
426060883 32586143 32767899
63399569 2111516 11111558
118823465 12303452 18517779
555762588 17820128 26800781
555905417 21288690 25007609
542246655 11774238 14270375
183359942 27527750 28886183
505102329 31348764 32222808
454877968 29395263 29936127
501298813 23861801 25677932
516842870 14198019 26643530
353649659 4450923 6021505
292051678 31539515 31680770
92039189 26979680 31083205
468990490 16724968 24914533
18348278 11332618 31291211
131890909 28143164 28645569
375278441 32021975 32214401
142914070 4018203 5755767
260126465 31771749 32050401
392954963 16740171 29603383
691782723 1445946 19603346
405835650 29401730 30779891
465917220 25504324 29005470
27506146 28234705 30093808
337418433 26399956 32018524
374161278 9633175 22472296
92207995 3210148 28720895
94725902 19407146 28522165
636437129 22302332 32223359
94725902 28522165 28755059
292051678 31539515 32202375
47815208 31292775 31881393
691782723 1445946 21210955
462274745 19411990 30096780
13284576 25229531 27373882
227308034 26785736 30173031
462274745 19411990 28954203
18348278 31291211 31502472
426060883 32586143 32811049
118823465 18517779 27224203
140431549 11261951 31859083
69400510 21302827 25233462
253080127 31330445 31496154
516842870 14198019 23656306
292406667 8339875 10445900
142914070 5755767 32110733
636189457 14053833 14782563
4154497 25323363 31011016
454877968 29395263 31216989
392954963 29603383 30805519
69400510 25368772 25862297
92039189 26979680 30640209
636437129 32223359 32597392
636437129 22302332 25273722
468990490 16724968 31421856
468990490 16724968 21635278
353501533 31685098 32214581
260126465 32050401 32491966
93557453 24042963 24928750
92207995 28720895 32581651
529533643 13904809 21022598
292406667 16897973 18187727
118823465 18517779 24080999
93557453 24042963 29347181
4154497 25323363 29200553
542246655 11774238 26468991
18348278 11332618 12530114
454877968 29395263 30382413
568483811 14619722 29592353
92039189 31083205 31225410
353501533 32052571 32745439
310452359 6754902 9161552
353649659 4450923 28185714
392954963 16740171 22565638
294068724 27660911 30848084
63399569 2111516 6835581
517137989 22113505 22825766
47815208 31292775 31631754
160927339 19735352 21414642
92207995 3210148 12528016
375278441 32214401 32547773
501298813 25677932 29913614
63399569 11111558 28332155
375278441 32021975 32573546
47815208 31292775 32248402
517137989 22113505 26546062
354860072 30635558 31691051
454877968 29936127 31149728
337418433 32018524 32729287
354860072 23071023 25326375
310452359 6754902 6904726
292406667 8339875 24325004
142914070 4018203 9893665
227308034 26785736 32200772
353501533 31685098 32696494
183359942 28886183 29191314
63399569 11111558 13431023
291957577 32688518 32774624
529533643 13904809 25482647
454877968 29395263 30348996
69400510 21302827 29601001
94725902 19407146 27417004
516842870 14198019 20263710
202802155 28821560 28924168
294068724 27660911 31566209
140431549 11261951 15920334
462274745 20995333 30923414
337418433 26399956 29118529
142914070 4018203 20765018
568483811 14619722 30574131
353501533 32052571 32752030
242728372 23907641 27238881
517137989 22113505 24362053
555905417 25007609 31105094
140431549 25827053 28876340
94725902 19407146 21992770
291957577 32272856 32806071
542246655 11774238 15965622
691782723 1445946 2260952
294068724 27660911 27766489
202802155 24795969 29820074
568483811 18320111 27953577
452827903 13241609 19369654
92207995 28720895 30046292
27506146 30093808 31033920
374161278 22472296 29545561
260126465 31771749 31835168
617608098 11379625 31432511
27506146 28234705 29264576
94725902 28522165 30042432
310452359 72159 8680461
131890909 28143164 30724469
577211595 26078143 27347989
529533643 13904809 14524808
405835650 29401730 32675149
691782723 1445946 30681429
93557453 24042963 25480397
353649659 6021505 16966698
118823465 18517779 30455149
691782723 1445946 22320759
452827903 7268114 17421404
426060883 32767899 32838229
294068724 30397643 32609347
617608098 22367042 32092762
465917220 25504324 28295313
310452359 72159 5806293
354860072 23071023 32022194
555905417 21288690 22360179
501298813 23861801 30359973
636189457 14053833 16700461
269764022 31168771 31828496

22813469556278651
*/